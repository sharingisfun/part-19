{"title":"Programming Mobile Cloud Computing with Android-KTR","uid":10833849,"size":1329249923,"categoryP":"other","categoryS":"other","magnet":"?xt=urn:btih:277f92eac1a97854e1537e2f4074132953956ac8&amp;dn=Programming+Mobile+Cloud+Computing+with+Android-KTR&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":2,"leechers":3,"uploader":"xKTRx","files":66,"time":1408652992,"description":"Programming Mobile Cloud Computing with Android-KTR\n\nIn this course----the third in a trans-institution sequence of MOOCs on Mobile Cloud Computing with Android--we will learn how to connect Android mobile devices to cloud computing and data storage resources, essentially turning a device into an extension of powerful cloud-based services on popular cloud computing platforms, such as Google App Engine and Amazon EC2.\n\n\nInstructors::\n1. Dr. C. Jules White\nAssistant Professor of Computer Science\nElectrical Engineering and Computer Science\nVanderbilt University\n\n\n2. Dr. Douglas C. Schmidt\nProfessor of Computer Science and Associate Chair of the Computer Science and Engineering Program\nElectrical Engineering and Computer Science\nVanderbilt University\n\n\n\n\nAbout the Course::\n\nThis MOOC describes by example how to connect Android mobile devices to clouds via the use of object-oriented design techniques, Java programming language features, Jetty middleware, Java Servlets, the Java Spring Framework, and cloud computing platforms, such as Google App Engine. Although there will be 10 weeks of lecture material, the required core of the course is six weeks long and can be completed flexibly within the ten week schedule to provide flexibility for students during the summer.\n\nAn extended case study project will be used throughout the required core of the MOOC to showcase architectures for communicating with the cloud using HTTP, server-side processing of mobile data using servlets and the Java Spring Framework, and scalable storage of data using no-SQL databases and other platforms. Due to the importance of building secure and scalable mobile/cloud platforms, this MOOC will not only show you how to program handheld systems that talk to the cloud, but how to do so securely, scalably, and efficiently. Security and scalability topics will be woven into discussions of cloud service creation so that students learn, from the start, how to create robust cloud services for mobile devices.\n\nFour weeks of optional lecture material will also be provided for students who would like to gain a deeper understanding of the patterns and frameworks for building cloud infrastructure building. This material will be presented in the context of the open-source JAWS web server, which is implemented in C++ as part of the ACE open-source object-oriented concurrent and networked programming toolkit.\n\nAlthough the cloud service topics in this course will be taught in the context of connecting mobile devices to the cloud, the concepts are broader and will give students the ability to create the cloud services to support large-scale web applications, such as social networking applications; cloud services for embedded systems, such as the Internet of Things and Industrial Internet; and wearable computing devices, such as Google Glass.\n\n\n\nCourse Includes::\n\nSection 1: Talking to the Cloud with HTTP\n\nModule 1: The HTTP Protocol\n\nIntroduction\nWhat are Communication Protocols?\nIntro to HTTP\nWhy HTTP?\nWhat is a cloud service?\nHTTP Request Methods\nHTTP Request Anatomy\nURLs Query Parameters\nMime Types Content Type Header\nRequest Body Encoding\nHTTP Response Anatomy\nHTTP Response Codes\nCookies\n\nModule 2: Designing Applications with HTTP Communication\n\nBuilding Cloud Services on HTTP\nProtocol Layering / HTTP Design Methodologies\nREST\nHTTP Polling\nPush Messaging\n\n\nSection 2: Building Java Cloud Services\n\nModule 1: Java Servlets\n\nWhat are Servlets?\nA First Cloud Service with a Servlet\nWeb.xml\nVideo Servlet Code Walkthrough\nVideo Servlet Test Walkthrough with HttpClient\nSecurely Handling Client Data Avoiding Injection Attacks\n\n\nModule 2: Better Abstractions for Building Java Cloud Services\n\nIntro to Java Annotations\nHTTP to Object Marshalling\nIntro to JSON\nThe Spring Dispatcher Servlet and the Controller Abstraction\nIntro to Spring Controllers\nAccepting Client Data with RequestParam Annotations\nAccepting Client Data with PathVar Annotations\nAccepting Client Data with RequestBody Annotations and JSON\nHandling Multipart Data\nGenerating Responses with the ResponseBody Annotation\nCustom Marshalling with Jackson Annotations Serializers/Deserializers\nSpring Boot Application Structure\nSpring Controller Code Walkthrough\nSpring Controller Test Code Walkthrough\n\n\nModule 3: Better Client-side Communication Abstractions\n\nIntroduction to Retrofit\nRetrofit Client Code Walkthrough\nAndroid Retrofit Client Code Walkthrough\n\n\nModule 4: Building Loosely Coupled and Extensible Java Services\n\nSpring Dependency Injection Auto-wiring\nSpring Configuration Annotations\nSpring Dependency Injection Controller Code Walkthrough\nSpring Dependency Injection Controller Test Code Walkthrough\n\n\nSection 3: Building Database-driven Java Cloud Services\n\nModule 1: Persistent Objects\n\nObject to DB Mapping\nJPA\nEntities\nRepositories\nUnderstanding SQL Injection Attacks\nSpring Data Code Walkthrough\n\n\nModule 2: RESTful Services for Persistent Objects\n\nSpring Data REST\nSpring Data REST Code Walkthrough\n\n\n\nSection 4: Restricting Service Access with User Accounts\n\nModule 1: Secure HTTP Communication\n\nMan in the Middle Attacks Public Key Infrastructure\nHTTPS\n\n\nModule 2: What was I Saying: Keeping Track of Sessions\n\nSessions\nSpring Security Overview\nSpring Security Configuration in Java\nBuilding a Custom UserDetailsService\nSetting up a custom UserDetailsService\nThe Principal\nSpring Security Role Annotations\nMore Complex Expression-based Pre Post Authorize Annotations\nSpring Security Controller Code Walkthrough\nSpring Security Controller Test Code Walkthrough\n\n\nModule 3: Authenticating Mobile Clients\n\nStateful Sessions with Cookies Why They Aren't Ideal for Mobile\nStateless Sessions with Tokens\nOAuth 2.0\nSpring Security OAuth 2.0\nA Spring OAuth 2.0 Secured Service\nA Retrofit Oauth 2.0 Client for Password Grants\n\n\n\nSection 5: Deploying to the Cloud Scaling\n\nModule 1: General Scaling Strategies\n\nStateless vs. Stateful Applications\nHorizontal Scaling\nAuto-scaling Horizontally\nCaching\nOffloading to Cloud Provider Services\nAsynchronous IO in Controllers\n\n\nModule 2: Scaling Up Data Storage\n\nNoSQL Databases\nOptimizing for Key-based Lookups\nOptimizing for Reads vs. Writes\nContention Sharding\nMongo DB\nSpring Data Mongo DB\nDatabase as a Service\nAmazon Dynamo\nSpring Data Dynamo DB\nApp Engine Big Table\n\n\n\nModule 3: Automating Packaging Deployment\n\nDeploying to Infrastructure as a Service\nDeploying to Amazon EC2\nPackaging Web Applications into WAR files\nAdapting Spring Boot Applications for Google App Engine\nDeploying to App Engine\n\n\n\nModule 4: Performance Testing\n\nIntro to Cloud Service Performance Testing\nApache JMeter\nBuilding Realistic Tests\n\n\n\nSection 6: Patterns and Frameworks for Concurrent and Networked Server Software [Optional Material]\n\nModule 1: Introduction to the Web Server Case Study\n\nApplying Patterns and Frameworks to Concurrent and Networked Software\nOverview of JAWS Web Server Case Study: Part 1\nOverview of JAWS Web Server Case Study: Part 2\nOverview of JAWS Web Server Case Study: Part 3\n\n\nModule 2: Patterns and Frameworks for Service Access and Communication\n\nAccidental Complexities with the Sockets API\nThe Wrapper Facade Pattern\nACE C++ Socket Wrapper Facades\nApplying the ACE Wrapper Facades to a Web Client and Server\n\n\nModule 3: Patterns and Frameworks for Synchronous Event Handling, Connections, and Service Initialization\n\nThe Reactor and Acceptor-Connector Patterns\nThe ACE Reactor Framework\nApplying the ACE Reactor to JAWS\nThe ACE Acceptor-Connector Framework and Applying it to JAWS\nPatterns and Frameworks for Service Configuration and Activiation\nThe Component Configurator Pattern\nThe ACE Service Configurator Framework\nApplying the ACE Service Configurator to JAWS\nApplying the Activator Pattern to JAWS\nPatterns and Frameworks for Concurrency and Synchronization\nThe Active Object Pattern\nThe ACE Task Framework\nApplying ACE Task and Acceptor-Connector to JAWS\nThe Half-Sync/Half-Async Pattern\nImplementing Half-Sync/Half-Async Using ACE\nThe Monitor Object Pattern\nApplying the Monitor Object and Synchronization Patterns to JAWS\nThe Leader/Followers Pattern\nApplying the Leader/Followers Pattern and ACE_TP_Reactor to JAWS\nPatterns and Frameworks for Asynchronous Event Handling\nThe Proactor pattern\nThe ACE Proactor Framework\nApplying the ACE Proactor Framework to JAWS\nThe Asynchronous Completion Token Pattern and Applying it to JAWS\n\n\nSummary\nEvaluating Patterns and Frameworks for Concurrent and Networked Software","torrent":{"xt":"urn:btih:277f92eac1a97854e1537e2f4074132953956ac8","amp;dn":"Programming+Mobile+Cloud+Computing+with+Android-KTR","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"277f92eac1a97854e1537e2f4074132953956ac8","infoHashBuffer":{"type":"Buffer","data":[39,127,146,234,193,169,120,84,225,83,126,47,64,116,19,41,83,149,106,200]},"announce":[],"urlList":[]}}